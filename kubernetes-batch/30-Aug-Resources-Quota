


Note:
for minikube
https://kubernetes.io/docs/tasks/configure-pod-container/assign-memory-resource/
kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
minikube addons disable heapster
minikube addons enable metrics-server
kubectl apply -f https://raw.githubusercontent.com/pythianarora/total-practice/master/sample-kubernetes-code/metrics-server.yaml


-----
$ kubectl top pods
NAME        CPU(cores)   MEMORY(bytes)
web-pjpbx   0m           3Mi

amit@amit-PC MINGW64 ~
$ kubectl top pods -A
NAMESPACE     NAME                               CPU(cores)   MEMORY(bytes)
default       web-pjpbx                          0m           3Mi
dev           nginx-deployment-0                 0m           6Mi
dev           web-0                              0m           3Mi
dev           web-1                              0m           5Mi
dev           web-2                              0m           8Mi
kube-system   coredns-5d78c9869d-h6vm8           3m           35Mi
kube-system   etcd-minikube                      36m          80Mi
kube-system   fluentd-elasticsearch-v8hkc        2m           51Mi
kube-system   kube-apiserver-minikube            72m          299Mi
kube-system   kube-controller-manager-minikube   31m          78Mi
kube-system   kube-proxy-cc2x2                   1m           35Mi
kube-system   kube-scheduler-minikube            5m           39Mi
kube-system   metrics-server-7746886d4f-7m9kq    7m           23Mi
kube-system   storage-provisioner                4m           22Mi

$ kubectl top nodes
NAME       CPU(cores)   CPU%   MEMORY(bytes)   MEMORY%
minikube   393m         19%    1644Mi          77%


---------------------
$ kubectl run nginx --image=nginx --dry-run=client  -o yaml  > pod.yaml

$ cat pod.yaml
apiVersion: v1
kind: Pod
metadata:
  labels:
    run: nginx
  name: nginx
spec:
  containers:
  - image: nginx
    name: nginx
    resources:
      requests:
        memory: "100Mi"
        cpu: "10m"
      limits:
        memory: "150Mi"
        cpu: "60m"


$ kubectl -n dev create -f pod.yaml

$ kubectl -n dev get po
NAME    READY   STATUS    RESTARTS   AGE
nginx   1/1     Running   0          7m10s


$ kubectl -n dev top pods
NAME    CPU(cores)   MEMORY(bytes)
nginx   0m           3Mi


------------------------
https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/quota-pod-namespace/

$ cat quota.yaml
apiVersion: v1
kind: ResourceQuota
metadata:
  name: pod-set
spec:
  hard:
    pods: "2"

$ kubectl -n dev create -f quota.yaml
resourcequota/pod-set created

amit@amit-PC MINGW64 ~/k8s/resources
$ kubectl -n dev get quota
NAME      AGE   REQUEST     LIMIT
pod-set   12s   pods: 1/2

$ cat deployment-testquota.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pod-quota-demo
spec:
  selector:
    matchLabels:
      purpose: quota-demo
  replicas: 3
  template:
    metadata:
      labels:
        purpose: quota-demo
    spec:
      containers:
      - name: pod-quota-demo
        image: nginx

$ kubectl -n dev create -f deployment-testquota.yaml

$ kubectl -n dev get po
NAME                              READY   STATUS    RESTARTS   AGE
nginx                             1/1     Running   0          15m
pod-quota-demo-6894bd9c68-rsksx   1/1     Running   0          3m7s


$ kubectl -n dev get deploy
NAME             READY   UP-TO-DATE   AVAILABLE   AGE
pod-quota-demo   1/3     1            1           2m40s

$ kubectl -n dev get deploy pod-quota-demo -o yaml


$ kubectl -n dev get quota
NAME      AGE     REQUEST     LIMIT
pod-set   6m57s   pods: 2/2


