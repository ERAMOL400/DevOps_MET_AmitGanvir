####  To list the pods based on labels name. #### 
$ kubectl run front --image=nginx --labels="app=front,type=fe"
$ kubectl run nginx --image=nginx --labels="app=nginx,type=fe"
$ kubectl run redis --image=redis
## it will list those pods who have this label.
$ kubectl get -l="type=fe"

## To delete pods from namespace (--all is for all pods)
$ kubectl delete pod --all
pod "nginx" deleted
pod "redis" deleted

OR
$ kubectl delete pod nginx
OR
$ kubectl delete pod nginx redis
------------------------
## Creating a service
## To get yaml output
$ kubectl create service clusterip nginx-svc1 --tcp="80" --dry-run=client -o yaml

## To create service
$ kubectl create service clusterip nginx-svc1 --tcp="80"

## It will create service with the basis of Pod name. Service will fetch labels from pod for selector.
$ kubectl expose pod nginx --type=ClusterIP --name=nginx-svc --port=80
$ kubectl get svc
$ curl <Service-IP>:80

## NodePort to access application from outside of the cluster. Check your default Nodeport and try to access application
## To mainly use to create service for existing pod.
$ kubect get po nginx --show-labels
$ kubectl expose pod nginx --type=NodePort --name=nginx-svc2 --port=80
$ kubectl get svc
$ curl <ec2-IP>:<Node-Port>
OR
on browser: http://<ec2-IP>:<Node-Port>


## Modifiying service by edit. We can update changes as we desire.
$ kubectl edit svc nginx-svc1
$ kubectl get svc

-----------------------------


######## We can create Service using yaml file as well ######

######## Create NodePort service type
$ vim nginx-nodeport1.yaml
apiVersion: v1
kind: Service
metadata:
  name: nginx-svc-nodeport1
spec:
  type: NodePort
  selector:
    app: nginx
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80

:wq

$ kubectl create -f nginx-nodeport1.yaml


###### Create NodePort service type with Nodeport
$ vim nginx-nodeport2.yaml
apiVersion: v1
kind: Service
metadata:
  name: nginx-svc-nodeport2
spec:
  type: NodePort
  selector:
    app: nginx
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
      nodePort: 31000

:wq

$ kubectl create -f nginx-nodeport2.yaml

###### Create LoadBalancer service type with Nodeport if you needed.
$ vim nginx-lb.yaml
apiVersion: v1
kind: Service
metadata:
  name: nginx-svc-lb
spec:
  type: LoadBalancer
  selector:
    app: nginx
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
      nodePort: 31001
:wq

$ kubectl create -f nginx-lb.yaml



